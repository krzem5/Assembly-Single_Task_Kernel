#ifndef _VIRTIO_REGISTERS_H_
#define _VIRTIO_REGISTERS_H_ 1
#include <kernel/types.h>



// PCI structure types
#define VIRTIO_PCI_CAP_COMMON_CFG 1
#define VIRTIO_PCI_CAP_NOTIFY_CFG 2
#define VIRTIO_PCI_CAP_ISR_CFG 3
#define VIRTIO_PCI_CAP_DEVICE_CFG 4
#define VIRTIO_PCI_CAP_PCI_CFG 5

#define VIRTIO_PCI_CAP_MIN VIRTIO_PCI_CAP_COMMON_CFG
#define VIRTIO_PCI_CAP_MAX VIRTIO_PCI_CAP_PCI_CFG

// Registers
#define VIRTIO_REG_DEVICE_FEATURES 0x00
#define VIRTIO_REG_GUEST_FEATURES 0x04
#define VIRTIO_REG_QUEUE_ADDRESS 0x08
#define VIRTIO_REG_QUEUE_SIZE 0x0c
#define VIRTIO_REG_QUEUE_NOTIFY 0x10
#define VIRTIO_REG_DEVICE_STATUS 0x12
#define VIRTIO_REG_ISR_STATUS 0x13
#define VIRTIO_REG_SPECIFIC 0x14

// Device Status flags
#define VIRTIO_DEVICE_STATUS_FLAG_ACKNOWLEDGE 0x01
#define VIRTIO_DEVICE_STATUS_FLAG_DRIVER 0x02
#define VIRTIO_DEVICE_STATUS_FLAG_DRIVER_OK 0x04
#define VIRTIO_DEVICE_STATUS_FLAG_FEATURES_OK 0x08
#define VIRTIO_DEVICE_STATUS_FLAG_DEVICE_NEEDS_RESET 0x40
#define VIRTIO_DEVICE_STATUS_FLAG_FAILED 0x80

// Features
#define VIRTIO_F_RING_INDIRECT_DESC 28
#define VIRTIO_F_RING_EVENT_IDX 29



#endif
